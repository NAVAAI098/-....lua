local function onPlayerLoaded()
    -- [Lighting Settings]
    local lgh = game:GetService("Lighting")
    sethiddenproperty(lgh, "Technology", 2)
    lgh.FogStart = math.huge
    lgh.FogEnd = math.huge

    for i, v in ipairs(lgh:GetChildren()) do
        if v:IsA("BloomEffect") or v:IsA("BlurEffect") or v:IsA("ColorCorrectionEffect") or v:IsA("SunRaysEffect") or v:IsA("DepthOfFieldEffect") then
            v.Enabled = false
        end
    end

    -- [Terrain Settings]
    local wsc = game:GetService("Workspace")
    wsc.Terrain.CastShadow = false
    wsc.Terrain.WaterReflectance = 0
    wsc.Terrain.WaterWaveSize = 0
    wsc.Terrain.WaterTransparency = 0
    wsc.Terrain.WaterWaveSpeed = 0
    sethiddenproperty(wsc, 'StreamingTargetRadius', 64)
    sethiddenproperty(wsc, 'StreamingPauseMode', 2)
    sethiddenproperty(wsc.Terrain, 'Decoration', false)

    -- [Network & Rendering Settings]
    settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
    settings().Rendering.MeshPartDetailLevel = Enum.MeshPartDetailLevel.Level01
    settings().Rendering.EagerBulkExecution = false

    settings().Network.IncomingReplicationLag = -1000
    settings().Physics.PhysicsEnvironmentalThrottle = 1
    UserSettings():GetService("UserGameSettings").MasterVolume = 0
    UserSettings():GetService("UserGameSettings").SavedQualityLevel = Enum.SavedQualitySetting.QualityLevel1
end

-- Call onPlayerLoaded when game is fully loaded
if not game:IsLoaded() then
    game.Loaded:Wait()
end
onPlayerLoaded()

-- Function to AutoEquip rods with cooldown
local lastEquipTime = 0
local equipCooldown = 1  -- cooldown time in seconds

local function AutoEquip()
    local currentTime = tick()
    if currentTime - lastEquipTime < equipCooldown then
        return  -- Skip if cooldown has not passed
    end

    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")

    if not humanoid then
        warn("Humanoid not found.")
        return
    end

    local playerStats = game:GetService("ReplicatedStorage"):FindFirstChild("playerstats")
    if not playerStats then
        warn("playerstats not found.")
        return
    end

    local rodsFolder = playerStats:FindFirstChild(player.Name)
    if not rodsFolder or not rodsFolder:FindFirstChild("Rods") then
        warn("Rods folder not found.")
        return
    end

    local RunService = game:GetService("RunService")
    RunService.Heartbeat:Connect(function()
        local backpack = player:FindFirstChild("Backpack")
        if backpack then
            for _, rod in ipairs(rodsFolder.Rods:GetChildren()) do
                local tool = backpack:FindFirstChild(rod.Name)
                if tool and not character:FindFirstChild(tool.Name) then
                    humanoid:EquipTool(tool)
                end
            end
        end
    end)

    lastEquipTime = currentTime  -- Update the last equip time
end

-- AutoEquip2 Function with cooldown
local lastEquip2Time = 0
local equip2Cooldown = 1  -- cooldown time in seconds

local function AutoEquip2()
    local currentTime = tick()
    if currentTime - lastEquip2Time < equip2Cooldown then
        return  -- Skip if cooldown has not passed
    end

    local player = game.Players.LocalPlayer
    local playerStats = game:GetService("ReplicatedStorage"):FindFirstChild("playerstats")

    if not playerStats then
        warn("playerstats not found.")
        return
    end

    local rodsFolder = playerStats:FindFirstChild(player.Name) and playerStats[player.Name]:FindFirstChild("Rods")
    if not rodsFolder then return end

    for _, rod in ipairs(rodsFolder:GetChildren()) do
        local events = game:GetService("ReplicatedStorage"):WaitForChild("events")
        if rodsFolder:FindFirstChild("Carbon Rod") and not rodsFolder:FindFirstChild("Rapid Rod") then
            events:WaitForChild("equiprod"):FireServer("Carbon Rod")
        elseif rodsFolder:FindFirstChild("Rapid Rod") and not rodsFolder:FindFirstChild("Trident Rod") then
            events:WaitForChild("equiprod"):FireServer("Rapid Rod")
        end
    end

    lastEquip2Time = currentTime  -- Update the last equip2 time
end

-- Function to handle interaction with UI elements
local function interact(path)
    if path then
        game:GetService("GuiService").SelectedObject = path
        task.wait(0.05)
        game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Return, false, game)
        task.wait(0.05)
        game:GetService("VirtualInputManager"):SendKeyEvent(false, Enum.KeyCode.Return, false, game)
        task.wait(0.05)
        game:GetService("GuiService").SelectedObject = nil
    end
end

-- Sell function with a set delay
local function Sell()
    wait(300)  -- Wait for 5 minutes
    workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Mel Merchant"):WaitForChild("merchant"):WaitForChild("sellall"):InvokeServer()
end

-- AutoReset function
local function Reset()
    local player = game:GetService("Players").LocalPlayer
    local playerName = player.Name
    local playerGui = player.PlayerGui
    local rods = game:GetService("ReplicatedStorage").playerstats[playerName].Rods:GetChildren()
    local rodsInWorld = workspace[playerName]:GetChildren()  -- Rename to rodsInWorld
    local character = player.Character

    for _, rod in pairs(rods) do
        for _, rodInWorld in pairs(rodsInWorld) do
            -- Check if bobber exists and no "shakeui"
            if rodInWorld:FindFirstChild("bobber") and not playerGui:FindFirstChild("shakeui") then
                wait(1)
                local rodTool = character:FindFirstChild(rod.Name)
                if rodTool then  -- Ensure rod exists in character
                    rodTool.events.reset:FireServer()
                end
            end
        end
    end
end

-- Function to teleport the player
function Teleport(target)
    local player = game.Players.LocalPlayer
    local humanoidRootPart = player.Character:WaitForChild("HumanoidRootPart")
    local distance = (target.Position - humanoidRootPart.Position).Magnitude
    local speed = distance > 1000 and 335 or 750  -- Adjust speed based on distance

    if distance < 10000 then
        humanoidRootPart.CFrame = CFrame.new(target.Position + Vector3.new(0, 0, 1), target.Position)
    else
        game:GetService("TweenService"):Create(humanoidRootPart, TweenInfo.new(distance / speed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(target.Position + Vector3.new(0, 0, 1), target.Position)}):Play()
    end
end

-- Continuous loop using Heartbeat to manage actions
game:GetService("RunService").Heartbeat:Connect(function()
    pcall(function()
        local player = game.Players.LocalPlayer
        if player.PlayerGui.loading.Enabled == false then
            -- Perform actions like auto-equip, reset, etc.
            AutoEquip()
            AutoEquip2()
            Reset()
            Sell()  -- Call sell after a delay
        end
    end)
end)


local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- ฟังก์ชันคลิกปุ่ม UI
local function interact(path)
    if path then
        game:GetService("GuiService").SelectedObject = path
        task.wait(0.05)
        game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Return, false, game)
        task.wait(0.05)
        game:GetService("VirtualInputManager"):SendKeyEvent(false, Enum.KeyCode.Return, false, game)
        task.wait(0.05)
        game:GetService("GuiService").SelectedObject = nil
    end
end

-- ฟังก์ชันตรวจสอบ UI "shakeui"
local function checkShakeUI(playerGui)
    return playerGui:FindFirstChild("shakeui") ~= nil
end

-- ฟังก์ชันจัดการการเดินทาง
local function handleTeleportIfNecessary(coins, Carbon, player, ReplicatedStorage)
    local teleportLocation = CFrame.new(-1510.98096, -234.718964, -2869.49194)
    local playerStats = ReplicatedStorage.playerstats[player.Name]
    
    if coins <= 2000 and not Carbon then
        Teleport(teleportLocation)
    elseif coins >= 2000 and not Carbon then
        Autorobs()
        Reset()
    elseif coins >= 14000 and not playerStats.Rods:FindFirstChild("Rapid Rod") then
        Autorobs()
        Reset()
    elseif coins >= 150000 and not playerStats.Rods:FindFirstChild("Trident Rod") then
        Autorobs()
        Reset()
    elseif not checkShakeUI(player.PlayerGui) and Carbon and not playerStats.Rods:FindFirstChild("Trident Rod") then
        Teleport(teleportLocation)
    elseif not checkShakeUI(player.PlayerGui) and playerStats.Rods:FindFirstChild("Rapid Rod") and not playerStats.Rods:FindFirstChild("Trident Rod") then
        Teleport(teleportLocation)
    elseif not checkShakeUI(player.PlayerGui) and playerStats.Rods:FindFirstChild("Rapid Rod") and playerStats.Rods:FindFirstChild("Trident Rod") then
        Teleport(teleportLocation)
    end
end

-- ฟังก์ชันสำหรับตรวจสอบและยิงเหตุการณ์ Reel
local function fireReelEvent(times)
    for i = 1, times do
        task.spawn(function()
            ReplicatedStorage.events.reelfinished:FireServer(100, true)
        end)
    end
end

-- ฟังก์ชันสำหรับเช็คและยิงเหตุการณ์ Reel
local function checkAndFireReel(player)
    local playerGui = player.PlayerGui
    local reelGui = playerGui:FindFirstChild("reel")
    if reelGui then
        fireReelEvent(15)
    end
end

-- สคริปต์หลักที่ทำงานเมื่อ UI ไม่แสดง
RunService.Heartbeat:Connect(function()
    local player = Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")
    local playerStats = ReplicatedStorage.playerstats[player.Name]
    local coins = tonumber(playerStats.Stats.coins.Value)
    local rods = playerStats.Rods:GetChildren()
    local NPCs = workspace.world.npcs:GetChildren()
    local Carbon = playerStats.Rods:FindFirstChild("Carbon Rod")

    -- ตรวจสอบสถานะและทำงานการเดินทางและอัปเกรด rods
    handleTeleportIfNecessary(coins, Carbon, player, ReplicatedStorage)

    -- ส่งเหตุการณ์ cast ไปยังเซิร์ฟเวอร์ถ้า NPC คือ "Mel Merchant"
    for _, rod in pairs(rods) do
        if player.Character:FindFirstChild(rod.Name) then
            for _, NPC in pairs(NPCs) do
                if NPC.Name == "Mel Merchant" then
                    local args = {100, 1}
                    player.Character[rod.Name].events.cast:FireServer(unpack(args))
                end
            end
        end
    end

    -- คลิกปุ่ม "shakeui" ถ้ามี
    if checkShakeUI(playerGui) then
        local button = playerGui.shakeui.safezone.button
        if button then
            interact(button)
        end
    end

    -- ตรวจสอบการรีลและยิงเหตุการณ์ถ้าจำเป็น
    checkAndFireReel(player)
end)